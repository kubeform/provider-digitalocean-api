/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-digitalocean-api/apis/containerregistry/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DockerCredentialsLister helps list DockerCredentialses.
// All objects returned here must be treated as read-only.
type DockerCredentialsLister interface {
	// List lists all DockerCredentialses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DockerCredentials, err error)
	// DockerCredentialses returns an object that can list and get DockerCredentialses.
	DockerCredentialses(namespace string) DockerCredentialsNamespaceLister
	DockerCredentialsListerExpansion
}

// dockerCredentialsLister implements the DockerCredentialsLister interface.
type dockerCredentialsLister struct {
	indexer cache.Indexer
}

// NewDockerCredentialsLister returns a new DockerCredentialsLister.
func NewDockerCredentialsLister(indexer cache.Indexer) DockerCredentialsLister {
	return &dockerCredentialsLister{indexer: indexer}
}

// List lists all DockerCredentialses in the indexer.
func (s *dockerCredentialsLister) List(selector labels.Selector) (ret []*v1alpha1.DockerCredentials, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DockerCredentials))
	})
	return ret, err
}

// DockerCredentialses returns an object that can list and get DockerCredentialses.
func (s *dockerCredentialsLister) DockerCredentialses(namespace string) DockerCredentialsNamespaceLister {
	return dockerCredentialsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DockerCredentialsNamespaceLister helps list and get DockerCredentialses.
// All objects returned here must be treated as read-only.
type DockerCredentialsNamespaceLister interface {
	// List lists all DockerCredentialses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DockerCredentials, err error)
	// Get retrieves the DockerCredentials from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DockerCredentials, error)
	DockerCredentialsNamespaceListerExpansion
}

// dockerCredentialsNamespaceLister implements the DockerCredentialsNamespaceLister
// interface.
type dockerCredentialsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DockerCredentialses in the indexer for a given namespace.
func (s dockerCredentialsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DockerCredentials, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DockerCredentials))
	})
	return ret, err
}

// Get retrieves the DockerCredentials from the indexer for a given namespace and name.
func (s dockerCredentialsNamespaceLister) Get(name string) (*v1alpha1.DockerCredentials, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dockercredentials"), name)
	}
	return obj.(*v1alpha1.DockerCredentials), nil
}
