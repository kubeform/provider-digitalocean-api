/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-digitalocean-api/apis/containerregistry/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ContainerRegistryLister helps list ContainerRegistries.
// All objects returned here must be treated as read-only.
type ContainerRegistryLister interface {
	// List lists all ContainerRegistries in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ContainerRegistry, err error)
	// ContainerRegistries returns an object that can list and get ContainerRegistries.
	ContainerRegistries(namespace string) ContainerRegistryNamespaceLister
	ContainerRegistryListerExpansion
}

// containerRegistryLister implements the ContainerRegistryLister interface.
type containerRegistryLister struct {
	indexer cache.Indexer
}

// NewContainerRegistryLister returns a new ContainerRegistryLister.
func NewContainerRegistryLister(indexer cache.Indexer) ContainerRegistryLister {
	return &containerRegistryLister{indexer: indexer}
}

// List lists all ContainerRegistries in the indexer.
func (s *containerRegistryLister) List(selector labels.Selector) (ret []*v1alpha1.ContainerRegistry, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ContainerRegistry))
	})
	return ret, err
}

// ContainerRegistries returns an object that can list and get ContainerRegistries.
func (s *containerRegistryLister) ContainerRegistries(namespace string) ContainerRegistryNamespaceLister {
	return containerRegistryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ContainerRegistryNamespaceLister helps list and get ContainerRegistries.
// All objects returned here must be treated as read-only.
type ContainerRegistryNamespaceLister interface {
	// List lists all ContainerRegistries in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ContainerRegistry, err error)
	// Get retrieves the ContainerRegistry from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ContainerRegistry, error)
	ContainerRegistryNamespaceListerExpansion
}

// containerRegistryNamespaceLister implements the ContainerRegistryNamespaceLister
// interface.
type containerRegistryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ContainerRegistries in the indexer for a given namespace.
func (s containerRegistryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ContainerRegistry, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ContainerRegistry))
	})
	return ret, err
}

// Get retrieves the ContainerRegistry from the indexer for a given namespace and name.
func (s containerRegistryNamespaceLister) Get(name string) (*v1alpha1.ContainerRegistry, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("containerregistry"), name)
	}
	return obj.(*v1alpha1.ContainerRegistry), nil
}
