/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-digitalocean-api/apis/spacesbucket/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SpacesBucketLister helps list SpacesBuckets.
// All objects returned here must be treated as read-only.
type SpacesBucketLister interface {
	// List lists all SpacesBuckets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SpacesBucket, err error)
	// SpacesBuckets returns an object that can list and get SpacesBuckets.
	SpacesBuckets(namespace string) SpacesBucketNamespaceLister
	SpacesBucketListerExpansion
}

// spacesBucketLister implements the SpacesBucketLister interface.
type spacesBucketLister struct {
	indexer cache.Indexer
}

// NewSpacesBucketLister returns a new SpacesBucketLister.
func NewSpacesBucketLister(indexer cache.Indexer) SpacesBucketLister {
	return &spacesBucketLister{indexer: indexer}
}

// List lists all SpacesBuckets in the indexer.
func (s *spacesBucketLister) List(selector labels.Selector) (ret []*v1alpha1.SpacesBucket, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SpacesBucket))
	})
	return ret, err
}

// SpacesBuckets returns an object that can list and get SpacesBuckets.
func (s *spacesBucketLister) SpacesBuckets(namespace string) SpacesBucketNamespaceLister {
	return spacesBucketNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SpacesBucketNamespaceLister helps list and get SpacesBuckets.
// All objects returned here must be treated as read-only.
type SpacesBucketNamespaceLister interface {
	// List lists all SpacesBuckets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SpacesBucket, err error)
	// Get retrieves the SpacesBucket from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SpacesBucket, error)
	SpacesBucketNamespaceListerExpansion
}

// spacesBucketNamespaceLister implements the SpacesBucketNamespaceLister
// interface.
type spacesBucketNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SpacesBuckets in the indexer for a given namespace.
func (s spacesBucketNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SpacesBucket, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SpacesBucket))
	})
	return ret, err
}

// Get retrieves the SpacesBucket from the indexer for a given namespace and name.
func (s spacesBucketNamespaceLister) Get(name string) (*v1alpha1.SpacesBucket, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("spacesbucket"), name)
	}
	return obj.(*v1alpha1.SpacesBucket), nil
}
