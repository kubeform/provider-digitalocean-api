/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-digitalocean-api/apis/droplet/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DropletLister helps list Droplets.
// All objects returned here must be treated as read-only.
type DropletLister interface {
	// List lists all Droplets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Droplet, err error)
	// Droplets returns an object that can list and get Droplets.
	Droplets(namespace string) DropletNamespaceLister
	DropletListerExpansion
}

// dropletLister implements the DropletLister interface.
type dropletLister struct {
	indexer cache.Indexer
}

// NewDropletLister returns a new DropletLister.
func NewDropletLister(indexer cache.Indexer) DropletLister {
	return &dropletLister{indexer: indexer}
}

// List lists all Droplets in the indexer.
func (s *dropletLister) List(selector labels.Selector) (ret []*v1alpha1.Droplet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Droplet))
	})
	return ret, err
}

// Droplets returns an object that can list and get Droplets.
func (s *dropletLister) Droplets(namespace string) DropletNamespaceLister {
	return dropletNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DropletNamespaceLister helps list and get Droplets.
// All objects returned here must be treated as read-only.
type DropletNamespaceLister interface {
	// List lists all Droplets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Droplet, err error)
	// Get retrieves the Droplet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Droplet, error)
	DropletNamespaceListerExpansion
}

// dropletNamespaceLister implements the DropletNamespaceLister
// interface.
type dropletNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Droplets in the indexer for a given namespace.
func (s dropletNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Droplet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Droplet))
	})
	return ret, err
}

// Get retrieves the Droplet from the indexer for a given namespace and name.
func (s dropletNamespaceLister) Get(name string) (*v1alpha1.Droplet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("droplet"), name)
	}
	return obj.(*v1alpha1.Droplet), nil
}
