/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-digitalocean-api/apis/project/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResourcesLister helps list Resourceses.
// All objects returned here must be treated as read-only.
type ResourcesLister interface {
	// List lists all Resourceses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Resources, err error)
	// Resourceses returns an object that can list and get Resourceses.
	Resourceses(namespace string) ResourcesNamespaceLister
	ResourcesListerExpansion
}

// resourcesLister implements the ResourcesLister interface.
type resourcesLister struct {
	indexer cache.Indexer
}

// NewResourcesLister returns a new ResourcesLister.
func NewResourcesLister(indexer cache.Indexer) ResourcesLister {
	return &resourcesLister{indexer: indexer}
}

// List lists all Resourceses in the indexer.
func (s *resourcesLister) List(selector labels.Selector) (ret []*v1alpha1.Resources, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Resources))
	})
	return ret, err
}

// Resourceses returns an object that can list and get Resourceses.
func (s *resourcesLister) Resourceses(namespace string) ResourcesNamespaceLister {
	return resourcesNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResourcesNamespaceLister helps list and get Resourceses.
// All objects returned here must be treated as read-only.
type ResourcesNamespaceLister interface {
	// List lists all Resourceses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Resources, err error)
	// Get retrieves the Resources from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Resources, error)
	ResourcesNamespaceListerExpansion
}

// resourcesNamespaceLister implements the ResourcesNamespaceLister
// interface.
type resourcesNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Resourceses in the indexer for a given namespace.
func (s resourcesNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Resources, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Resources))
	})
	return ret, err
}

// Get retrieves the Resources from the indexer for a given namespace and name.
func (s resourcesNamespaceLister) Get(name string) (*v1alpha1.Resources, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("resources"), name)
	}
	return obj.(*v1alpha1.Resources), nil
}
