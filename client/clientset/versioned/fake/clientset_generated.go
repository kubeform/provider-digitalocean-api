/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	clientset "kubeform.dev/provider-digitalocean-api/client/clientset/versioned"
	appv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/app/v1alpha1"
	fakeappv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/app/v1alpha1/fake"
	cdnv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/cdn/v1alpha1"
	fakecdnv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/cdn/v1alpha1/fake"
	certificatev1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/certificate/v1alpha1"
	fakecertificatev1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/certificate/v1alpha1/fake"
	containerregistryv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/containerregistry/v1alpha1"
	fakecontainerregistryv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/containerregistry/v1alpha1/fake"
	customv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/custom/v1alpha1"
	fakecustomv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/custom/v1alpha1/fake"
	databasev1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/database/v1alpha1"
	fakedatabasev1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/database/v1alpha1/fake"
	domainv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/domain/v1alpha1"
	fakedomainv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/domain/v1alpha1/fake"
	dropletv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/droplet/v1alpha1"
	fakedropletv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/droplet/v1alpha1/fake"
	firewallv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/firewall/v1alpha1"
	fakefirewallv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/firewall/v1alpha1/fake"
	floatingipv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/floatingip/v1alpha1"
	fakefloatingipv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/floatingip/v1alpha1/fake"
	kubernetesv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/kubernetes/v1alpha1"
	fakekubernetesv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/kubernetes/v1alpha1/fake"
	loadbalancerv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/loadbalancer/v1alpha1"
	fakeloadbalancerv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/loadbalancer/v1alpha1/fake"
	monitorv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/monitor/v1alpha1"
	fakemonitorv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/monitor/v1alpha1/fake"
	projectv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/project/v1alpha1"
	fakeprojectv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/project/v1alpha1/fake"
	recordv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/record/v1alpha1"
	fakerecordv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/record/v1alpha1/fake"
	spacesbucketv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/spacesbucket/v1alpha1"
	fakespacesbucketv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/spacesbucket/v1alpha1/fake"
	sshv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/ssh/v1alpha1"
	fakesshv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/ssh/v1alpha1/fake"
	tagv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/tag/v1alpha1"
	faketagv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/tag/v1alpha1/fake"
	volumev1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/volume/v1alpha1"
	fakevolumev1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/volume/v1alpha1/fake"
	vpcv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/vpc/v1alpha1"
	fakevpcv1alpha1 "kubeform.dev/provider-digitalocean-api/client/clientset/versioned/typed/vpc/v1alpha1/fake"

	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	cs := &Clientset{tracker: o}
	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
	cs.AddReactor("*", "*", testing.ObjectReaction(o))
	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	return cs
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
	tracker   testing.ObjectTracker
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *Clientset) Tracker() testing.ObjectTracker {
	return c.tracker
}

var _ clientset.Interface = &Clientset{}

// AppV1alpha1 retrieves the AppV1alpha1Client
func (c *Clientset) AppV1alpha1() appv1alpha1.AppV1alpha1Interface {
	return &fakeappv1alpha1.FakeAppV1alpha1{Fake: &c.Fake}
}

// CdnV1alpha1 retrieves the CdnV1alpha1Client
func (c *Clientset) CdnV1alpha1() cdnv1alpha1.CdnV1alpha1Interface {
	return &fakecdnv1alpha1.FakeCdnV1alpha1{Fake: &c.Fake}
}

// CertificateV1alpha1 retrieves the CertificateV1alpha1Client
func (c *Clientset) CertificateV1alpha1() certificatev1alpha1.CertificateV1alpha1Interface {
	return &fakecertificatev1alpha1.FakeCertificateV1alpha1{Fake: &c.Fake}
}

// ContainerregistryV1alpha1 retrieves the ContainerregistryV1alpha1Client
func (c *Clientset) ContainerregistryV1alpha1() containerregistryv1alpha1.ContainerregistryV1alpha1Interface {
	return &fakecontainerregistryv1alpha1.FakeContainerregistryV1alpha1{Fake: &c.Fake}
}

// CustomV1alpha1 retrieves the CustomV1alpha1Client
func (c *Clientset) CustomV1alpha1() customv1alpha1.CustomV1alpha1Interface {
	return &fakecustomv1alpha1.FakeCustomV1alpha1{Fake: &c.Fake}
}

// DatabaseV1alpha1 retrieves the DatabaseV1alpha1Client
func (c *Clientset) DatabaseV1alpha1() databasev1alpha1.DatabaseV1alpha1Interface {
	return &fakedatabasev1alpha1.FakeDatabaseV1alpha1{Fake: &c.Fake}
}

// DomainV1alpha1 retrieves the DomainV1alpha1Client
func (c *Clientset) DomainV1alpha1() domainv1alpha1.DomainV1alpha1Interface {
	return &fakedomainv1alpha1.FakeDomainV1alpha1{Fake: &c.Fake}
}

// DropletV1alpha1 retrieves the DropletV1alpha1Client
func (c *Clientset) DropletV1alpha1() dropletv1alpha1.DropletV1alpha1Interface {
	return &fakedropletv1alpha1.FakeDropletV1alpha1{Fake: &c.Fake}
}

// FirewallV1alpha1 retrieves the FirewallV1alpha1Client
func (c *Clientset) FirewallV1alpha1() firewallv1alpha1.FirewallV1alpha1Interface {
	return &fakefirewallv1alpha1.FakeFirewallV1alpha1{Fake: &c.Fake}
}

// FloatingipV1alpha1 retrieves the FloatingipV1alpha1Client
func (c *Clientset) FloatingipV1alpha1() floatingipv1alpha1.FloatingipV1alpha1Interface {
	return &fakefloatingipv1alpha1.FakeFloatingipV1alpha1{Fake: &c.Fake}
}

// KubernetesV1alpha1 retrieves the KubernetesV1alpha1Client
func (c *Clientset) KubernetesV1alpha1() kubernetesv1alpha1.KubernetesV1alpha1Interface {
	return &fakekubernetesv1alpha1.FakeKubernetesV1alpha1{Fake: &c.Fake}
}

// LoadbalancerV1alpha1 retrieves the LoadbalancerV1alpha1Client
func (c *Clientset) LoadbalancerV1alpha1() loadbalancerv1alpha1.LoadbalancerV1alpha1Interface {
	return &fakeloadbalancerv1alpha1.FakeLoadbalancerV1alpha1{Fake: &c.Fake}
}

// MonitorV1alpha1 retrieves the MonitorV1alpha1Client
func (c *Clientset) MonitorV1alpha1() monitorv1alpha1.MonitorV1alpha1Interface {
	return &fakemonitorv1alpha1.FakeMonitorV1alpha1{Fake: &c.Fake}
}

// ProjectV1alpha1 retrieves the ProjectV1alpha1Client
func (c *Clientset) ProjectV1alpha1() projectv1alpha1.ProjectV1alpha1Interface {
	return &fakeprojectv1alpha1.FakeProjectV1alpha1{Fake: &c.Fake}
}

// RecordV1alpha1 retrieves the RecordV1alpha1Client
func (c *Clientset) RecordV1alpha1() recordv1alpha1.RecordV1alpha1Interface {
	return &fakerecordv1alpha1.FakeRecordV1alpha1{Fake: &c.Fake}
}

// SpacesbucketV1alpha1 retrieves the SpacesbucketV1alpha1Client
func (c *Clientset) SpacesbucketV1alpha1() spacesbucketv1alpha1.SpacesbucketV1alpha1Interface {
	return &fakespacesbucketv1alpha1.FakeSpacesbucketV1alpha1{Fake: &c.Fake}
}

// SshV1alpha1 retrieves the SshV1alpha1Client
func (c *Clientset) SshV1alpha1() sshv1alpha1.SshV1alpha1Interface {
	return &fakesshv1alpha1.FakeSshV1alpha1{Fake: &c.Fake}
}

// TagV1alpha1 retrieves the TagV1alpha1Client
func (c *Clientset) TagV1alpha1() tagv1alpha1.TagV1alpha1Interface {
	return &faketagv1alpha1.FakeTagV1alpha1{Fake: &c.Fake}
}

// VolumeV1alpha1 retrieves the VolumeV1alpha1Client
func (c *Clientset) VolumeV1alpha1() volumev1alpha1.VolumeV1alpha1Interface {
	return &fakevolumev1alpha1.FakeVolumeV1alpha1{Fake: &c.Fake}
}

// VpcV1alpha1 retrieves the VpcV1alpha1Client
func (c *Clientset) VpcV1alpha1() vpcv1alpha1.VpcV1alpha1Interface {
	return &fakevpcv1alpha1.FakeVpcV1alpha1{Fake: &c.Fake}
}
